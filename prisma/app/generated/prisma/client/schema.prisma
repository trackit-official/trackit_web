// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

// Authentication Models - Required for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  role                  String    @default("USER")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt

  // Security tracking fields
  failedLoginAttempts Int       @default(0)
  lastFailedLoginAt   DateTime?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  userAgent           String?

  // User preferences
  defaultCurrency   String @default("NGN")
  timezone          String @default("Africa/Lagos")
  notificationPrefs Json? // Stores notification preferences as JSON

  // Relations
  accounts     Account[]
  sessions     Session[]
  apiKeys      ApiKey[]
  bankAccounts BankAccount[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  name      String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

// Finance tracking models
model BankAccount {
  id            String    @id @default(cuid())
  userId        String
  accountName   String
  accountNumber String?
  bankName      String
  balance       Float
  currency      String    @default("NGN")
  isActive      Boolean   @default(true)
  lastSynced    DateTime?

  // Mono integration fields
  monoId            String? @unique // Mono account ID from exchangeToken (auth.id)
  // monoAccountId   String?   // This is likely redundant if monoId is the main identifier from Mono
  accountHolderName String? // From Mono Identity
  bvn               String? // From Mono Identity
  status            String? // e.g., ACTIVE, REAUTH_REQUIRED, SYNCED, UNLINKED, SYNC_FAILED
  monoDataStatus    String? // From Mono meta.data_status (e.g., AVAILABLE, PROCESSING, FAILED)
  authMethod        String? // From Mono meta.auth_method (e.g., internet_banking, mobile_banking)
  // monoAccessToken String?   @db.Text // Initial code from widget; consider if needed long-term
  monoReauthToken   String? @db.Text // For re-initiating Mono Connect for re-authentication

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
}

model Transaction {
  id           String          @id @default(cuid())
  userId       String
  accountId    String // Internal BankAccount ID
  amount       Float
  type         TransactionType
  narration    String // Changed from description to match Mono
  category     String? // Category from Mono or user-defined
  reference    String?
  date         DateTime
  balanceAfter Float? // Renamed from balance for clarity, balance after this transaction
  currency     String          @default("NGN")

  // For duplicate prevention & linking to Mono transaction
  monoTransactionId String? @unique // Unique ID from Mono (tx._id), was externalId

  // Transaction metadata
  metadata Json?
  notes    String?  @db.Text
  tags     String[]

  // Categorization
  categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account             BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactionCategory Category?   @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
}

model Category {
  id        String          @id @default(cuid())
  userId    String
  name      String
  color     String          @default("#000000")
  icon      String?
  type      TransactionType
  isDefault Boolean         @default(false)
  isSystem  Boolean         @default(false) // System-defined categories cannot be deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name, type])
  @@index([userId])
}

model Budget {
  id          String       @id @default(cuid())
  userId      String
  name        String
  amount      Float
  categoryId  String
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime?
  isRecurring Boolean      @default(false)
  isActive    Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
}

// Optional: Notification model if you're implementing the notification system
model Notification {
  id      String  @id @default(cuid())
  userId  String
  title   String
  message String
  type    String // e.g., "transaction", "budget_alert", "system"
  isRead  Boolean @default(false)
  data    Json? // Additional context data

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

// Enums
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}
